#!/usr/bin/env python
# vim: set noet :

import re
import sys
import json
import base64
import urllib
import urllib2
import os.path

VERSION = "ghs devel"

# Exit status codes
EXIT_BAD_ARGS = 2
EXIT_CONFIG_ERR = 3
EXIT_SCRIPT_ERR = 4
EXIT_SCRIPT_NOT_FOUND = 5

# Default configuration
default_config = dict(
	base_url = "https://api.github.com",
	script_dirs = ["~/.ghscripts"],
	debug = False,
	verbose = False,
	oauthtoken = None,
	username = None,
	password = None,
)
class Config:
	debug = default_config['debug']
	verbose = default_config['verbose']
	def __repr__(self):
		values = ', '.join(['%s=%r' % (k, getattr(self, k))
				for k in dir(self) if not k.startswith('__')])
		return 'Config(' + values + ')'
config = Config()

# Configuration is read from ~/.ghsrc, if should be a python formatted file like
# this:
# ---
# profiles = dict()
# profiles['admin'] = dict(
# 	username = "some-admin-user",
# 	password="SUPER SECRET",
# )
# profiles['me'] = dict(
#	oauthtoken = 'some super long token given by github',
# )
# profiles['other-company'] = dict(
# 	username = "my-user-company2",
# 	password="SUPER COMPANY 2 SECRET",
# 	debug = True, # optional
# 	verbose = True, # optional
# )
# profiles['default'] = profiles['me']
# ---
# So you can define multiples profiles. The 'default' profile is special
# because is used if you don't specify any profiles. If no default profile is
# found and no profile was specified through the command line, no
# authentication is used and default_base_url is used as default.
#
# If you don't care about profiles, you can use the old flat syntax, for
# example:
# ---
# base_url = 'https://api.github.com' # optional
# debug = True # optional
# verbose = True # optional
# username = "YOURNAME-YOURLASTNAME-sociomantic"
# password = "YOUR SUPER SECRET PASSWORD"
# # or oauthtoken = 'some super long token given by github'
# ---
# And you can mix both (profiles['default'] will have precedence over the
# global defaults.
#


def verbose(msg, *args):
	global config
	if config.verbose:
		sys.stdout.write((msg + "\n") % args)


def dbg(msg, *args):
	global config
	if config.debug:
		sys.stderr.write((msg + "\n") % args)

# Exit the program with an error message and a given status code.
# Optional keyword arguments:
# tb = Print traceback too (default False)
# remove_tb = Remove the first N frames from the traceback
#             (default is 2, only used if tb=True)
def die(parser, status, fmt, *args, **kwargs):
	sys.stderr.write(parser.prog + ': error: ' + (fmt % args) + '\n')

	if kwargs.get('tb', False):
		sys.stderr.write("\n")
		from traceback import print_exception
		(exc_type, exc_value, exc_tb) = sys.exc_info()
		for i in range(kwargs.get('remove_tb', 2)):
			exc_tb = exc_tb.tb_next
		sys.stderr.write("Traceback (most recent call last):\n")
		print_exception(exc_type, exc_value, exc_tb)

	sys.exit(status)


# Load a Python file as a module using the file directory as part of the Python
# path to resolve imports.
def load_source(module_name, file_name):
	import imp
	sys.path.insert(0, os.path.dirname(file_name))
	try:
		return imp.load_source(module_name, file_name)
	finally:
		sys.path.pop(0)


# Read and parse configuration from a configuration file for a specific profile
def parse_config(parser, args):
	config_required = False
	if not isinstance(args.config_files, list):
		config_required = True
		args.config_files = [args.config_files]
	args.config_files = [os.path.expanduser(c) for c in args.config_files]

	dbg("Parsing config files %s looking for profile %s...",
			args.config_files, args.profile)

	global default_config

	# Start with the default config
	parsed_config = dict(default_config)
	dbg("defaults: %s", parsed_config)

	ghrc = None
	for config_file in args.config_files:
		try:
			ghrc = load_source('ghrc', config_file)
		except IOError as e:
			from errno import ENOENT
			if config_required or e.errno != ENOENT:
				parser.die(EXIT_CONFIG_ERR, "can't read "
					"configuration file '%s': %s",
					config_file, e)
			continue
		except Exception as e:
			parser.die(EXIT_CONFIG_ERR, "can't load "
				"configuration file '%s'", config_file,
				tb=True)

		# Update with the global values
		for var in default_config.keys():
			if hasattr(ghrc, var):
				parsed_config[var] = getattr(ghrc, var)
		dbg("after globals: %s", parsed_config)

		# Update with the profile
		if hasattr(ghrc, 'profiles') and args.profile in ghrc.profiles:
			profile = ghrc.profiles[args.profile]
			dbg("profile %s: %s", args.profile, profile)
			for var in default_config.keys():
				if var in profile:
					parsed_config[var] = profile[var]

	for k, v in parsed_config.items():
		setattr(config, k, v)

	# Override configuration with command line options
	for var in default_config.keys():
		if var in args:
			val = getattr(args, var)
			if isinstance(val, list):
				val += getattr(config, var)
			setattr(config, var, val)

	# Prioritize username/password authentication if --username was used
	if 'username' in args:
		config.oauthtoken = None

	config.script_dirs = [os.path.expanduser(d)
			for d in config.script_dirs]

	# Fill the program name
	config.prog = parser.prog

	if config.username is not None and config.password is None:
		parser.error("username provided but not a password")

	return config


# A GitHub HTTP Error
#
# This is a HTTPError for which the body is parsed as json. If we find some
# common attributes used in GitHub errors, we assume it is one. For this the
# class method getFrom() should be used, which returns a GitHub error if the
# provided HTTPError looks like one, or None if it looks like a regular
# HTTPError.
#
# The GitHubError also provide the attributes:
# * message
# * documentation_url
# * errors
# That should be present in every GitHub error.
#
# Please take a look at:
# https://developer.github.com/v3/#client-errors
# for more details.
class GitHubError (urllib2.HTTPError):

	@classmethod
	def getFrom(cls, http_error):
		body = http_error.read()
		try:
			obj = json.loads(body)
			msg = obj['message']
			doc = obj['documentation_url']
		except Exception as e:
			dbg("Not a valid GitHub error: %s (%s: %s)",
					body, e.__class__.__name__, e)
			return GitHubError(http_error, body)
		return GitHubError(http_error, msg, doc, obj.get('error'))

	def __init__(self, http_error, message=None, documentation_url=None,
		errors=None):
		self.message = message
		self.documentation_url = documentation_url
		self.errors = errors
		e = http_error
		super(GitHubError, self).__init__(e.url,
			e.code, self.build_message(), e.hdrs, e.fp)

	def build_message(self):
		msg = self.message or "Unknown error"
		if self.errors:
			msg += ". Errors:\n"
			for e in self.errors:
				if e['code'] == 'custom':
					m = "{message}"
				elif e['code'] == 'missing':
					m = "missing"
				else:
					m = "{field} {code}"
				msg += ("* {resource}: " + m + "\n").format(**e)
		if self.documentation_url:
			msg += "\nDocumentation: " + self.documentation_url
		return msg


accepted_methods = ('options', 'head', 'get', 'post', 'patch', 'put', 'delete')


# Manages GitHub request handling authentication and content headers.
#
# The real interesting methods are created after the class declaration, for
# each type of request: head(), get(), post(), patch(), put() and delete().
#
# All these methods take an URL (relative to the base_url) and optionally an
# arbitrarily number of positional or keyword arguments (but not both at the
# same time). The extra arguments, if present, are serialized as json and sent
# as the request body.
# All these methods return None if the response is empty, or the deserialized
# json data received in the body of the response.
#
# Example:
#
#    r = req.post('/repos/sociomantic/test/labels/', name=name, color=color)
#
# The basic auth has priority over oauthtoken for authentication. If you want
# to use OAuth just leave `basic_auth` and set `oauthtoken`. To fill the
# `basic_auth` member, the `set_basic_auth()` convenient method is provided).
#
# See http://developer.github.com/ for more details on the GitHub API
class RequestManager:

	# Shortcut to access GitHubErrors from the request object
	GitHubError = GitHubError

	basic_auth = None
	oauthtoken = None
	links_re = re.compile(r'<([^>]+)>;.*rel=[\'"]?([^"]+)[\'"]?', re.M)
	# For advanced usage, you can try upcoming API changes by using:
	# "application/vnd.github.ironman-preview+json" for example
	accept = "application/json"

	def __init__(self, base_url, oauthtoken=None,
			username=None, password=None):
		self.base_url = base_url
		if oauthtoken is not None:
			self.oauthtoken = oauthtoken
		elif username is not None:
			self.set_basic_auth(username, password)

	# Configure the class to use basic authentication instead of OAuth
	def set_basic_auth(self, username, password):
		self.basic_auth = "Basic " + base64.urlsafe_b64encode("%s:%s" %
			(username, password))

	# Open an URL in an authenticated manner using the specified HTTP
	# method. It also add other convenience headers, like Content-Type,
	# Accept (both to json) and Content-Length).
	def auth_urlopen(self, url, method, body):
		req = urllib2.Request(url, body)
		if self.basic_auth:
			req.add_header("Authorization", self.basic_auth)
		elif self.oauthtoken:
			req.add_header("Authorization", "bearer " +
					self.oauthtoken)
		req.add_header("Content-Type", "application/json")
		req.add_header("Accept", self.accept)
		req.add_header("Content-Length", str(len(body) if body else 0))
		req.get_method = lambda: method.upper()
		dbg('%s', req.get_full_url())
		# Hide sensitive information from DEBUG output
		if config.debug:
			for h in req.header_items():
				if h[0].lower() == 'authorization':
					dbg('%s: %s', h[0], '<hidden>')
				else:
					dbg('%s: %s', *h)
		dbg('%s', req.get_data())
		try:
			return urllib2.urlopen(req)
		except urllib2.HTTPError as e:
			raise GitHubError.getFrom(e) or e

	# Serialize args OR kwargs (they are mutually exclusive) as json.
	def dump(self, *args, **kwargs):
		if args and kwargs:
			raise ValueError('args and kwargs are mutually '
				'exclusive')
		if args:
			return json.dumps(args)
		if kwargs:
			return json.dumps(kwargs)
		return None

	# Get the next URL from the Link: header, if any
	def get_next_url(self, response):
		links = list()
		for l in response.headers.get("Link", "").split(','):
			links.extend(self.links_re.findall(l))
		links = dict((rel, url) for url, rel in links)
		return links.get("next", None)

	# This is the real method used to do the work of the head(), get() and
	# other high-level methods. `url` should be a relative URL for the
	# GitHub API, `method` is the HTTP method to be used (must be in
	# uppercase), and args/kwargs are data to be sent to the client. Only
	# one can be specified at a time and they are serialized as json (args
	# as a json list and kwargs as a json dictionary/object).
	def json_req(self, url, method, *args, **kwargs):
		verbose("%s %s", method, url)
		if not url.startswith('http'):
			url = self.base_url + url
		if method.lower() in ('post', 'patch', 'put'):
			body = self.dump(*args, **kwargs)
		else:
			body = None
			url += '?' + urllib.urlencode(kwargs)
		data = None
		prev_data = []
		while url:
			dbg("Request: %s %s\n%s", method, url, body)
			res = self.auth_urlopen(url, method, body)
			data = res.read()
			dbg("Response:\n%s", data)
			if data:
				data = json.loads(data)
				if isinstance(data, list):
					prev_data.extend(data)
					data = []
			url = self.get_next_url(res)
		assert not (prev_data and data)
		if prev_data:
			data = prev_data
		dbg("Parsed data:\n%s", data)
		return data

# Create RequestManager.head(), get(), ... methods
# We need the make_method() function to make Python bind the method variable
# (from the loop) early (in the loop) instead of when is called. Otherwise all
# methods get bind with the last value of method ('delete') in this case, which
# is not only what we want, is also very dangerous.
def make_method(method):
	return lambda self, url, *args, **kwargs: \
		self.json_req(url, method, *args, **kwargs)
for method in accepted_methods:
	setattr(RequestManager, method, make_method(method))


class CheckFailed (Exception):
	pass

# Do some basic sanity checks on the script to see if it can be run
def check_script(script):
	# Silently skip scripts that shouldn't be listed
	if hasattr(script, 'desc') and script.desc is None:
		raise CheckFailed('is marked as a non-script (has desc=None)')
	if not hasattr(script, 'main'):
		raise CheckFailed('no main() function found')
	from inspect import getargspec
	(args, varargs, keywords, defaults) = getargspec(script.main)
	if varargs is not None:
		return True
	nargs = len(args or []) - len(defaults or [])
	if len(args or []) < 3 or nargs > 3:
		raise CheckFailed('main() should accept only 3 required '
				'arguments')
	return True


def print_available_scripts(script_dirs, verbose=False, fo=sys.stdout):
	from glob import glob
	scripts = dict()
	for script in sum([glob(d + '/*.py') for d in script_dirs], []):
		name = os.path.basename(script)[:-3]
		if name in scripts:
			continue
		module = None
		desc = '<no description>'

		try:
			module = load_source(name, script)
			if hasattr(module, 'desc'):
				desc = getattr(module, 'desc')
				# Silently skip scripts that shouldn't be listed
				if desc is None:
					continue
			if verbose:
				desc += ' <%s>' % script
			check_script(module)
		except IOError as e:
			name = '!' + name
			desc = "<%s read error: %s>" % (script, e)
		except Exception as e:
			name = '!' + name
			desc = "<%s broken: %s>" % (script, e)
		if verbose or not name.startswith('!'):
			scripts[name] = desc

	if not scripts:
		return

	width = max([len(n) for n in scripts])
	for name in sorted(scripts.keys()):
		fo.write(('  %- '+str(width)+'s\t%s\n') % (name, scripts[name]))


def load_script(parser, args, config):
	def die(status, fmt, *args, **kwargs):
		fmt += ' (script dirs: ' + ', '.join(config.script_dirs) + ')'
		parser.die(status, fmt, *args, **kwargs)

	if not args.script.endswith('.py'):
		for d in config.script_dirs:
			script_file = d + '/' + args.script + '.py'
			script_name = os.path.basename(script_file)[:-3]
			try:
				script = load_source(script_name, script_file)
				check_script(script)
				break
			except IOError as e:
				import errno
				if e.errno != errno.ENOENT:
					die(EXIT_SCRIPT_ERR, "can't load "
						"script `%s` <%s>: %s",
						script_name, script_file, e)
			except CheckFailed as e:
				die(EXIT_SCRIPT_ERR, "can't load script `%s` "
					"<%s>: %s", script_name, script_file, e)
			except Exception as e:
				die(EXIT_SCRIPT_ERR, "can't load "
					"script `%s` <%s> (script dirs: %s)",
					script_name, script_file,
					config.script_dirs,
					tb=True)
		else:
			die(EXIT_SCRIPT_NOT_FOUND, "can't find a script with "
					"the name `%s`", args.script)
	else:
		script_name = os.path.basename(args.script)[:-3]
		try:
			script = load_source(script_name, args.script)
			check_script(script)
		except CheckFailed as e:
			die(EXIT_SCRIPT_ERR, "can't load script <%s>: %s",
					args.script, e)
		except Exception as e:
			die(EXIT_SCRIPT_ERR, "can't load script <%s>",
					args.script,
					tb=True)

	return script


def create_argparser():
	global default_config
	import argparse
	# Monkeypatch ArgumentParser to add the die() method
	argparse.ArgumentParser.die = die

	parser = argparse.ArgumentParser(description='GitHub scripts runner.',
			add_help=False,
			formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument('-h', '--help', action='store_true',
			default=argparse.SUPPRESS,
			help='show this help message and exit')
	parser.add_argument('--version', action='version', version=VERSION)
	parser.add_argument('-c', '--config-file', metavar='FILE',
			dest='config_files', default=['/etc/ghsrc', '~/.ghsrc'],
			help='configuration file to use')
	parser.add_argument('-p', '--profile', metavar='NAME',
			default='default',
			help='profile to use from the config file')
	parser.add_argument('-v', '--verbose', action='store_true',
			default=argparse.SUPPRESS,
			help='show verbose output (http requests URLs)')
	parser.add_argument('-d', '--debug', action='store_true',
			default=argparse.SUPPRESS,
			help='show debug output (complete requests with '
			'headers and JSON bodies)')
	parser.add_argument('-a', '--accept', metavar='MEDIATYPE',
			default=RequestManager.accept,
			help='media type to accept (useful to use GitHub API '
			'previews)')
	parser.add_argument('-b', '--base-url', metavar='URL',
			default=argparse.SUPPRESS,
			help='base URL to use to make GitHub API requests '
			'(default: %(base_url)s)' % default_config)
	parser.add_argument('-o', '--oauth-token', metavar='TOKEN',
			default=argparse.SUPPRESS, dest='oauthtoken',
			help='GitHub OAuth token to use to authenticate')
	parser.add_argument('-u', '--username', metavar='USER',
			default=argparse.SUPPRESS,
			help='GitHub username to use to authenticate')
	parser.add_argument('-P', '--password', metavar='PASS',
			default=argparse.SUPPRESS,
			help='GitHub password to use to authenticate')
	parser.add_argument('-D', '--script-dir', metavar='DIR',
			dest='script_dirs', action='append',
			default=argparse.SUPPRESS,
			help='directory where to search for scripts; can be '
			'used multiple times, last option has priority over '
			'the previous ones')
	group = parser.add_mutually_exclusive_group()
	group.add_argument('-l', '--list-scripts', action='store_true',
			default=argparse.SUPPRESS,
			help='list available scripts and exit')
	group.add_argument('-L', '--list-all-scripts', action='store_true',
			default=argparse.SUPPRESS,
			help='list all scripts, including extra information '
			'and broken scripts (prefixed with a "!" and a '
			'description of why is broken) and exit')
	group.add_argument('script', nargs='?', default=argparse.SUPPRESS,
			help='name of the script to call, if it ends in '
			'".py" then it is considered a path to a file '
			'instead of a script name to look for in the '
			'--script-dir directory')
	parser.add_argument('script_args', metavar='...',
			nargs=argparse.REMAINDER,
			help='script arguments')

	return parser


def print_help(parser, fo):
	global config
	parser.print_help(file=fo)
	fo.write('\n')
	fo.write('available scripts:\n')
	print_available_scripts(config.script_dirs, False, fo)


def main():
	global config
	parser = create_argparser()

	args = parser.parse_args()

	# Reverse the specified script_dirs
	if 'script_dirs' in args:
		args.script_dirs = args.script_dirs[::-1]

	config = parse_config(parser, args)
	dbg("args: %s", args)
	dbg("config: %s", config)

	if 'help' in args:
		print_help(parser, sys.stdout)
		sys.exit(0)

	if 'list_scripts' in args or 'list_all_scripts' in args:
		verbose = 'list_all_scripts' in args
		sys.stdout.write('Available scripts')
		if verbose:
			sys.stdout.write(' (in %s)' %
					', '.join(config.script_dirs))
		sys.stdout.write(':\n')
		print_available_scripts(config.script_dirs, verbose, sys.stdout)
		sys.exit(0)

	if 'script' not in args:
		print_help(parser, sys.stderr)
		sys.stderr.write('\n')
		parser.die(EXIT_BAD_ARGS, 'please specify a script')

	rq = RequestManager(config.base_url, config.oauthtoken,
			config.username, config.password)
	rq.accept = args.accept

	script = load_script(parser, args, config)
	script.main(rq, args.script_args, config)


if __name__ == '__main__':
	try:
		main()
	except urllib2.HTTPError as e:
		print e
		print e.geturl()
		print e.headers
		print e.read()

